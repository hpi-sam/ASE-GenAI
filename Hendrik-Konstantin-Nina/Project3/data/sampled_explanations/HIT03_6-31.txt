1: lines 84-97 reference character counts; which seems much more correlated to the concept in the failure of being out of range. It almost seems like the amount should be 0 and that is causing the error.
2: Calling the translate method with in it's body .
3: If the codePointAt method returns a unicode character value greater than 0x10000; then charCount returns 2; which would be potentially added to pos to create a larger index value than the string length.
4: While I am not sure exactly what this portion of the program is trying to accomplish I believe that there is a high likelihood that it could cause the program to crash.  My thoughts are that on line 95 we are incrementing pos by a value associated with input; and then we are repeating this while an unrelated condition (pt < consumed) holds true.  I think there is a strong possibility this would cause us to step out of bounds on input and get the StringIndexOutOfBoundsException we see in the error.
5: The only place in the code where they are using arrays and dealing with array indexes; high probability of issue being present here
6: pos is trying to add to itself via charcount of an input that is out of range.
7: The while loop has a potential to be infinite if the array c is null (I believe Java allows arrays of size 0).
8: The pos counter is being incremented in line 89 and line 95 within the while; so it could be incremented beyond the len variable.
9: It might if the position it returns in the string isn't accessible
10: The invocation will call to inspect the input at positions that are out of range (pos)
11: depending on the input; the "pos" could be longer than the length of the input.
12: I think you're incrementing 'pos' by two in line 89 then when it gets to 95 you're asking for the code point at position 2 but since there are only 2 positions; the highest address is 1 and that's why you're getting index out of bounds.
13: PT++ Should be PT+
14: The error has to be in this block.  There seems to be another translate function defined that takes 3 arguments and returns an int so it's possible the error is in there. It's possible that pos is getting increased too much at line 95 also and the error is occurring at that line.
15: Yes; there is an exception with surrogate pairs; so there is an issue in line 95 which deals with surrogate pairs I think. Don't understand Unicode and UTF-16 handling well enough to pinpoint the problem.
16: On line 85; a recursive call is made to the function with an improper number of arguments and expecting a return value.
17: Ok I get it; it is an issue with index numbers being less than the length
18: On line 95; there is a space between pos and += which I feel is the wrong syntax. Instead; it should be pos+=. I suspect this threw an exception.
19: There is no code to prevent pt++ from exceeding len (where len = input.length();)
20: I'm a little fuzzy on what is going on with this code because I'm not up on all the details of handling unicode but the purpose of this sections seems to be dealing with the fact that in things like UTF-8 sometimes you get characters that are one byte and sometimes 2. Anyway; the issue seems to be with the for loop on line 94. We are incrementing the variable pt and checking that it is less than consumed but we are accessing the input via the pos variable.    If consumed == 0 on line 86 then we increment pos on line 89. Pos appears to always be incremented at a value of greater than or equal to one for every character in the input. The point is that pos gets incremented at a rate faster than characters from the input are consumed and can become longer than the input length which will raise an error on line 95 when consumed is greater than zero.
21: pt can go out of range of the array
22: That variable is not correct
23: the for loop is limited up to the value of consumed; while pos is incremented; possibly past the end of input since there are no check conditions.
24: The input "\uD83D\uDE30" needs to be passed through the Class StringEscapeUtils as well.
25: Yes
26: This code is probably the cause of the StringIndexOutOfBoundsException error.  The String index out of range 2 message seem to indicate that the variable pos is going beyond the size of variable input. On each iteration through the loop; pos is being incremented but it could already be at the end of input; so after it is incremented again; pos is going to be invalid; causing a StringIndexOutOfBoundsException error.
27: As I said in my previous answer; I'm pretty sure the issue is with one of the Character.codePointAt method calls.  It also would require the "pos" variable to reach the value of 2 to have thrown the error listed above.  I can't figure out any way for the "pos" variable to reach a value of 2 and still execute another iteration of the loop (which might lead to the execution of line 87 and an exception there).  Each time the "pos" variable is changed (potentially to an invalid amount) the continue keyword sends the program back to line 84 where the "pos" value is checked against the "len" variable for validity.    Therefore; it seems that the only place where the exception could be coming from is line 95.
28: Think So
29: This is definitely where the problem is; but I'm not sure where.
30: Checking a character in the string with pos most likely causes an error since the error is a string out of bounds
31: as pos gets larger; it will go past CharSequence at given (input; pos)
