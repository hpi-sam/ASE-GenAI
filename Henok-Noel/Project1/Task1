1.1: We struggled a while to come up with the right query. The 'friend of a friend' logic produced some problems for us. Our end query is

  SELECT
    total_likers.messageid,
    total_likers.like_count,
    foreign_likers.like_count,
    foreign_likers.like_count / CAST(total_likers.like_count AS float) AS foreign_like_ratio
  FROM (
    SELECT
      m_messageid AS messageid,
      COUNT(l_personid) AS like_count
    FROM message
    INNER JOIN likes
    ON l_messageid = m_messageid
    WHERE m_length > 100
    GROUP BY m_messageid
    HAVING COUNT(l_personid) >= 20
  ) AS total_likers
  INNER JOIN (
    SELECT messageid, COUNT(DISTINCT(l_personid)) as like_count
    FROM (
      SELECT
        m_messageid AS messageid,
        l_personid
      FROM (
        message
        INNER JOIN likes
        ON l_messageid = m_messageid
      )
      EXCEPT (
        SELECT
          m_messageid AS messageid,
          l_personid
        FROM (
          message
          INNER JOIN likes
          ON l_messageid = m_messageid
        )
        INNER JOIN (
          SELECT
            k0.k_person1id AS personid,
            k0.k_person2id AS friendid,
            k1.k_person2id AS friendfriendid
          FROM knows AS k0
          INNER JOIN knows AS k1
          ON k0.k_person2id = k1.k_person1id
        ) AS friends
        ON friends.personid = m_creatorid
        AND (friends.friendid = l_personid OR friends.friendfriendid = l_personid)
      )
    )
    GROUP BY messageid
  ) AS foreign_likers
  ON foreign_likers.messageid = total_likers.messageid
  WHERE total_likers.like_count <= foreign_likers.like_count * 2
  ORDER by foreign_like_ratio DESC;

1.2:
The Chat : https://chatgpt.com/share/673dd69d-5650-800b-97df-1d03e6a3c876
ChatGPT's final (not quite correct) query is the following:

  WITH direct_friends AS (
    -- Get direct friends of the creator of each message
    SELECT DISTINCT k.k_person2id AS friend_id, m.m_messageid
    FROM knows k
    JOIN message m ON k.k_person1id = m.m_creatorid
),
friends_of_friends AS (
    -- Get friends of the direct friends of the creator
    SELECT DISTINCT k.k_person2id AS fof_id, df.m_messageid
    FROM knows k
    JOIN direct_friends df ON k.k_person1id = df.friend_id
),
non_foreign_likes AS (
    -- Combine the creator, direct friends, and friends of friends
    SELECT DISTINCT l.l_personid, m.m_messageid
    FROM likes l
    JOIN message m ON l.l_messageid = m.m_messageid
    LEFT JOIN direct_friends df ON l.l_personid = df.friend_id AND l.l_messageid = df.m_messageid
    LEFT JOIN friends_of_friends fof ON l.l_personid = fof.fof_id AND l.l_messageid = fof.m_messageid
    WHERE l.l_personid = m.m_creatorid OR df.friend_id IS NOT NULL OR fof.fof_id IS NOT NULL
)
SELECT 
    m.m_messageid AS message_id,
    COUNT(l.l_personid) AS total_likes,
    SUM(CASE WHEN l.l_personid NOT IN (
        SELECT l_personid
        FROM non_foreign_likes
        WHERE m_messageid = m.m_messageid
    ) THEN 1 ELSE 0 END) AS foreign_likes,
    SUM(CASE WHEN l.l_personid NOT IN (
        SELECT l_personid
        FROM non_foreign_likes
        WHERE m_messageid = m.m_messageid
    ) THEN 1 ELSE 0 END) * 1.0 / COUNT(l.l_personid) AS foreign_ratio
FROM 
    message m
JOIN 
    likes l ON l.l_messageid = m.m_messageid
WHERE 
    m.m_length > 100
GROUP BY 
    m.m_messageid
HAVING 
    COUNT(l.l_personid) >= 20 AND 
    SUM(CASE WHEN l.l_personid NOT IN (
        SELECT l_personid
        FROM non_foreign_likes
        WHERE m_messageid = m.m_messageid
    ) THEN 1 ELSE 0 END) >= COUNT(l.l_personid) / 2
ORDER BY 
    foreign_ratio DESC;


1.3: We head quite a bit of theoretical knowledge stemming from courses such as DBS1, DBS2 or the Build your
own Database seminar but rarely applied any of that. So we knew the basic syntax and operations but had no real
practise. For 1.1 we started with developing a query for finding the total likes and then for the larger part of
determining foreign likes we first wrote the query to find friends, then used this to determine the likes which
were not made by friends and thereby calculated the foreign like count. There we wrote smaller subqueries each time
and validated them using the data. We used a bit more than 3 hours for this as there was a lot of debugging and 
rewriting involved which increased the difficulty.

We wrote the queries in a text editor and then pasted them to the terminal for validation. The terminals response
helped a little in discovering syntax errors.
