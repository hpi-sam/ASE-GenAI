WITH FriendAndForeignLikes AS (
    -- Step 1: Calculate total likes and foreign likes for each message
    SELECT 
        l.l_messageid,
        COUNT(l.l_personid) AS total_likes,
        SUM(CASE 
                WHEN NOT EXISTS (
                         -- Check if the like is from the creator's direct friends or their friends' friends
                         SELECT 1 
                         FROM knows k 
                         WHERE k.k_person1id = m.m_creatorid 
                               AND k.k_person2id = l.l_personid  -- Direct friend check
                         UNION
                         SELECT 1
                         FROM knows k1
                         JOIN knows k2 ON k1.k_person2id = k2.k_person1id 
                         WHERE k1.k_person1id = m.m_creatorid 
                               AND k2.k_person2id = l.l_personid  -- Friend's friend check
                     ) 
                THEN 1  -- The like is foreign
                ELSE 0 
            END) AS foreign_likes
    FROM likes l
    JOIN message m ON l.l_messageid = m.m_messageid
    WHERE m.m_length > 100  -- Filter for messages with length > 100
    GROUP BY l.l_messageid, m.m_creatorid
    HAVING COUNT(l.l_personid) >= 20  -- At least 20 likes
),
MessageRatios AS (
    -- Step 2: Calculate the foreign like ratio
    SELECT 
        fl.l_messageid,
        fl.total_likes,
        fl.foreign_likes,
        (fl.foreign_likes * 1.0 / fl.total_likes) AS foreign_like_ratio
    FROM FriendAndForeignLikes fl
    JOIN message m ON fl.l_messageid = m.m_messageid
    WHERE fl.foreign_likes >= fl.total_likes / 2  -- At least half the likes are foreign
)
-- Step 3: Return the message data, ordered by the foreign like ratio
SELECT 
    fl.l_messageid,
    fl.total_likes,
    fl.foreign_likes
FROM MessageRatios fl
ORDER BY fl.foreign_like_ratio DESC;