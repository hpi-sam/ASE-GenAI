-- working version
--Precompute message likes where message length > 100 and total likes >= 20
WITH MessageLikes AS (
    SELECT
        m.m_messageid,
        COUNT(l.l_personid) AS total_likes
    FROM
        message m
        JOIN likes l ON m.m_messageid = l.l_messageid
    WHERE
        m.m_length > 100
    GROUP BY
        m.m_messageid
    HAVING COUNT(l.l_personid) >= 20
),

-- Extend the network to include direct friends and friends of friends
ExtendedNetwork AS (
    SELECT 
        m.m_messageid,
        k.k_person2id AS person_id
    FROM 
        message m
        JOIN knows k ON m.m_creatorid = k.k_person1id
    WHERE 
        m.m_messageid IN (SELECT m_messageid FROM MessageLikes) -- Filter to messages with sufficient likes
    
    UNION ALL  -- Use UNION ALL to avoid deduplication overhead
    SELECT 
        m.m_messageid,
        k2.k_person2id AS person_id
    FROM 
        message m
        JOIN knows k1 ON m.m_creatorid = k1.k_person1id
        JOIN knows k2 ON k1.k_person2id = k2.k_person1id
    WHERE 
        m.m_messageid IN (SELECT m_messageid FROM MessageLikes)
),

-- Calculate the number of foreign likes for each message
ForeignLikes AS (
    SELECT
        l.l_messageid AS message_id,
        COUNT(l.l_personid) AS foreign_likes
    FROM
        likes l
    LEFT JOIN ExtendedNetwork en 
        ON l.l_messageid = en.m_messageid 
        AND l.l_personid = en.person_id
    WHERE
        en.person_id IS NULL  -- Only foreign likes
        AND l.l_messageid IN (SELECT m_messageid FROM MessageLikes) -- Filter for relevant messages
    GROUP BY
        l.l_messageid
    HAVING COUNT(l.l_personid) >= (SELECT total_likes / 2 FROM MessageLikes ml WHERE ml.m_messageid = l.l_messageid)
),

-- Identify the first foreign like for each message
FirstForeignLike AS (
    SELECT DISTINCT ON (l.l_messageid) 
        l.l_messageid AS message_id,
        l.l_personid,
        l.l_creationdate
    FROM
        likes l
    LEFT JOIN ExtendedNetwork en 
        ON l.l_messageid = en.m_messageid 
        AND l.l_personid = en.person_id
    WHERE
        en.person_id IS NULL  -- Only foreign likes
        AND l.l_messageid IN (SELECT m_messageid FROM MessageLikes)
    ORDER BY
        l.l_messageid, l.l_creationdate
),

-- Get the name and creation time of the first foreign like person for each message
FirstForeignPerson AS (
    SELECT
        ffl.message_id,
        CONCAT(p.p_firstname, ' ', p.p_lastname) AS first_foreign_person_name,
        ffl.l_creationdate AS first_foreign_like_time
    FROM
        FirstForeignLike ffl
    JOIN person p ON ffl.l_personid = p.p_personid
)

-- Main query to combine all results
SELECT
    ml.m_messageid,
    ml.total_likes,
    fl.foreign_likes,
    COALESCE(ff.first_foreign_person_name, 'N/A') AS first_foreign_person_name,
    COALESCE(ff.first_foreign_like_time, NULL) AS first_foreign_like_time
FROM 
    MessageLikes ml
JOIN 
    ForeignLikes fl ON ml.m_messageid = fl.message_id
LEFT JOIN 
    FirstForeignPerson ff ON ml.m_messageid = ff.message_id
ORDER BY 
    fl.foreign_likes::float / ml.total_likes DESC;
