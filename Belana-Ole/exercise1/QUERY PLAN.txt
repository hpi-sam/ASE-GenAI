                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=106415849.92..106415853.72 rows=1521 width=72)
   Sort Key: (((fl.foreign_likes)::double precision / ((count(l.l_personid)))::double precision)) DESC
   CTE foreignlikes
     ->  WindowAgg  (cost=100921300.07..106400503.87 rows=82080 width=40)
           ->  WindowAgg  (cost=100921300.07..106399272.67 rows=82080 width=32)
                 ->  Incremental Sort  (cost=100921300.07..106397836.27 rows=82080 width=24)
                       Sort Key: l_1.l_messageid, l_1.l_creationdate
                       Presorted Key: l_1.l_messageid
                       ->  Merge Anti Join  (cost=100920533.74..106395221.99 rows=82080 width=24)
                             Merge Cond: ((l_1.l_messageid = m_1.m_messageid) AND (l_1.l_personid = k.k_person2id))
                             ->  Sort  (cost=13205.41..13479.01 rows=109440 width=24)
                                   Sort Key: l_1.l_messageid, l_1.l_personid
                                   ->  Seq Scan on likes l_1  (cost=0.00..1798.40 rows=109440 width=24)
                                   ->  Sort  (cost=100907328.34..101992543.28 rows=434085979 width=16)
                                         Sort Key: m_1.m_messageid, k.k_person2id
                                         ->  Append  (cost=41372.61..8956449.07 rows=434085979 width=16)
                                               ->  Merge Join  (cost=41372.61..173247.94 rows=8735356 width=16)
                                                     Merge Cond: (k.k_person1id = m_1.m_creatorid)
                                                     ->  Sort  (cost=2541.54..2611.90 rows=28146 width=16)
                                                           Sort Key: k.k_person1id
                                                           ->  Seq Scan on knows k  (cost=0.00..461.46 rows=28146 width=16)
                                                     ->  Materialize  (cost=38819.43..40253.15 rows=286744 width=16)
                                                           ->  Sort  (cost=38819.43..39536.29 rows=286744 width=16)
                                                                 Sort Key: m_1.m_creatorid
                                                                 ->  Seq Scan on message m_1  (cost=0.00..7923.44 rows=286744 width=16)
                                               ->  Merge Join  (cost=227722.01..6612771.23 rows=425350623 width=16)
                                                     Merge Cond: (m_2.m_creatorid = k1.k_person1id)
                                                     ->  Sort  (cost=38819.43..39536.29 rows=286744 width=16)
                                                           Sort Key: m_2.m_creatorid
                                                           ->  Seq Scan on message m_2  (cost=0.00..7923.44 rows=286744 width=16)
						     ->  Materialize  (cost=188901.84..195754.41 rows=1370513 width=16)
                                                           ->  Sort  (cost=188901.84..192328.13 rows=1370513 width=16)
                                                                 Sort Key: k1.k_person1id
                                                                 ->  Merge Join  (cost=5083.08..25781.50 rows=1370513 width=16)
                                                                       Merge Cond: (k1.k_person2id = k2.k_person1id)
                                                                       ->  Sort  (cost=2541.54..2611.90 rows=28146 width=16)
                                                                             Sort Key: k1.k_person2id
                                                                             ->  Seq Scan on knows k1  (cost=0.00..461.46 rows=28146 width=16)
                                                                       ->  Sort  (cost=2541.54..2611.90 rows=28146 width=16)
                                                                             Sort Key: k2.k_person1id
                                                                             ->  Seq Scan on knows k2  (cost=0.00..461.46 rows=28146 width=16)
>  Hash Join  (cost=13392.02..15265.66 rows=1521 width=72)
         Hash Cond: (fl.message_id = m.m_messageid)
         Join Filter: (fl.foreign_likes >= ((count(l.l_personid)) / 2))
         ->  Hash Join  (cost=2112.88..3966.42 rows=410 width=44)
:Cancel request sent
               Hash Cond: (fl_1.fl_personid = person.p_personid)
               ->  Hash Join  (cost=2058.50..3906.40 rows=410 width=40)
                     Hash Cond: (fl_1.message_id = fl.message_id)
                     ->  CTE Scan on foreignlikes fl_1  (cost=0.00..1846.80 rows=410 width=24)
                           Filter: (rn = 1)
                     ->  Hash  (cost=2056.00..2056.00 rows=200 width=16)
                           ->  Subquery Scan on fl  (cost=2052.00..2056.00 rows=200 width=16)
                                 ->  HashAggregate  (cost=2052.00..2054.00 rows=200 width=16)
                                       Group Key: foreignlikes.message_id
                                       ->  CTE Scan on foreignlikes  (cost=0.00..1641.60 rows=82080 width=16)
               ->  Hash  (cost=35.28..35.28 rows=1528 width=20)
                     ->  Seq Scan on person  (cost=0.00..35.28 rows=1528 width=20)
 ->  Hash  (cost=11251.33..11251.33 rows=2225 width=16)
               ->  HashAggregate  (cost=11167.88..11251.33 rows=2225 width=16)
                     Group Key: m.m_messageid
                     Filter: (count(l.l_personid) >= 20)
                     ->  Hash Join  (cost=8858.94..11134.50 rows=6676 width=16)
                           Hash Cond: (l.l_messageid = m.m_messageid)
                           ->  Seq Scan on likes l  (cost=0.00..1798.40 rows=109440 width=16)
                           ->  Hash  (cost=8640.30..8640.30 rows=17491 width=8)
                                 ->  Seq Scan on message m  (cost=0.00..8640.30 rows=17491 width=8)
                                       Filter: (m_length > 100)
 JIT:
   Functions: 99
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(71 rows)


