WITH MessageLikes AS (
    SELECT
        m.m_messageid,
        COUNT(l.l_personid) AS total_likes
    FROM
        message m
        JOIN likes l ON m.m_messageid = l.l_messageid
    WHERE
        m.m_length > 100
    GROUP BY
        m.m_messageid
),
ExtendedNetwork AS (
    SELECT m.m_messageid, k.k_person2id AS person_id -- friends
    FROM message m
    JOIN knows k ON m.m_creatorid = k.k_person1id
    UNION
    SELECT m.m_messageid, k2.k_person2id AS person_id -- friend's friends
    FROM message m
    JOIN knows k1 ON m.m_creatorid = k1.k_person1id
    JOIN knows k2 ON k1.k_person2id = k2.k_person1id
),
ForeignLikes AS (
    SELECT
        l.l_messageid AS message_id,
        l.l_creationdate AS fl_creationdate,
        l.l_personid AS fl_personid,
        COUNT(*) OVER (PARTITION BY l.l_messageid) AS foreign_likes,
        ROW_NUMBER() OVER (PARTITION BY l.l_messageid ORDER BY l.l_creationdate) AS rn
    FROM
        likes l
        LEFT JOIN ExtendedNetwork en ON l.l_messageid = en.m_messageid
        AND l.l_personid = en.person_id
    WHERE
        en.person_id IS NULL
),
FirstLiker AS (
    SELECT 
        message_id,
        fl_creationdate AS first_like_creation,
        p_firstname || ' ' || p_lastname AS first_liker_name
    FROM
        ForeignLikes fl
        JOIN person ON p_personid = fl.fl_personid
    WHERE
        rn = 1
)
SELECT
    ml.m_messageid,
    ml.total_likes,
    fl.foreign_likes,
    ff.first_like_creation,
    ff.first_liker_name
FROM MessageLikes ml
JOIN (
    SELECT message_id, MAX(foreign_likes) AS foreign_likes
    FROM ForeignLikes
    GROUP BY message_id
) fl ON ml.m_messageid = fl.message_id
JOIN FirstLiker ff ON ml.m_messageid = ff.message_id
WHERE
    ml.total_likes >= 20
    AND fl.foreign_likes >= ml.total_likes / 2
ORDER BY
    fl.foreign_likes::float / ml.total_likes DESC;
